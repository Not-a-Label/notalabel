version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/letsencrypt
      - ./public:/var/www/not-a-label/public
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend
      - notification-server
    restart: unless-stopped
    networks:
      - not-a-label

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    networks:
      - not-a-label

  # Backend API
  backend:
    build:
      context: ./not-a-label-backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_PATH=/app/data/notalabel.db
    env_file:
      - ./not-a-label-backend/config/production.env
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
    ports:
      - "4000:4000"
    restart: unless-stopped
    networks:
      - not-a-label
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification WebSocket Server
  notification-server:
    build:
      context: ./not-a-label-backend
      dockerfile: Dockerfile.notification
    environment:
      - NODE_ENV=production
    ports:
      - "4001:4001"
    restart: unless-stopped
    networks:
      - not-a-label

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.22
    ports:
      - "7233:7233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgres
    depends_on:
      - postgres
    networks:
      - not-a-label
    restart: unless-stopped

  # PostgreSQL for Temporal
  postgres:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=temporal
      - POSTGRES_PASSWORD=temporal
      - POSTGRES_DB=temporal
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - not-a-label
    restart: unless-stopped

  # Temporal Worker
  temporal-worker:
    build:
      context: ./not-a-label-backend
      dockerfile: Dockerfile.worker
    environment:
      - NODE_ENV=production
      - TEMPORAL_ADDRESS=temporal:7233
    env_file:
      - ./not-a-label-backend/config/production.env
    depends_on:
      - temporal
      - backend
    networks:
      - not-a-label
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - not-a-label
    restart: unless-stopped

networks:
  not-a-label:
    driver: bridge

volumes:
  postgres-data:
  redis-data: